package exectoy

type selectLTIntIntConstOp struct {
	input ExecOp

	col1Idx  int
	constArg int
	sel      column
}

func (p *selectLTIntIntConstOp) Init() {
	p.sel = make(column, batchRowLen)
}

func (p *selectLTIntIntConstOp) Next() dataFlow {
	flow := p.input.Next()

	col1 := flow.b[p.col1Idx]
	flow.n = selectLTIntIntConst(flow.n, flow.useSel, flow.sel, col1, p.constArg, flow.sel)
	return flow
}

// These will be autogenerated.
// n is the number of rows in the column.
// sel is an optional input parameter. If set, it's a selection vector from
// earlier in the pipe.
// col1 is the column being filtered.
// c is the constant being compared against.
// res is the output selection vector.
// returned is the number of rows in the selection vector
func selectLTIntIntConst(n int, useSel bool, sel column, col1 column, c int, res column) int {
	idx := 0
	// hard to see how to eliminate this if.
	if useSel {
		for s := 0; s < n; s++ {
			i := sel[s]
			if col1[i] < c {
				res[idx] = i
				idx++
			}
		}
	} else {
		for i := 0; i < n; i++ {
			if col1[i] < c {
				res[idx] = i
				idx++
			}
		}
	}
	return idx
}
