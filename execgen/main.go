package main

import (
	"flag"
	"fmt"
	"io"
	"os"

	"text/template"
)

type op int

const (
	invalidOp op = iota
	plusOp
	minusOp
	mulOp
	divOp
)

type typ int

const (
	invalidTyp typ = iota
	intTyp
	doubleTyp
)

type typDef struct {
	Name  string
	GoTyp string
}

var typs = map[typ]typDef{
	intTyp: typDef{
		Name:  "Int",
		GoTyp: "int",
	},
	doubleTyp: typDef{
		Name:  "Double",
		GoTyp: "float64",
	},
}

var opNames = map[op]string{
	plusOp:  "Plus",
	minusOp: "Minus",
	mulOp:   "Mul",
	divOp:   "Div",
}

type overload struct {
	Name   string
	OpStr  string
	LTyp   typDef
	RTyp   typDef
	RetTyp typDef
}

func makeOverload(t typ, opStr string) overload {
	return overload{
		OpStr:  opStr,
		LTyp:   typs[t],
		RTyp:   typs[t],
		RetTyp: typs[t],
	}
}

var opMap = map[op][]overload{
	plusOp: {
		makeOverload(intTyp, "+"),
		makeOverload(doubleTyp, "+"),
	},
	minusOp: {
		makeOverload(intTyp, "-"),
		makeOverload(doubleTyp, "-"),
	},
	mulOp: {
		makeOverload(intTyp, "-"),
		makeOverload(doubleTyp, "-"),
	},
	divOp: {
		makeOverload(intTyp, "/"),
		makeOverload(doubleTyp, "/"),
	},
}

func init() {
	for i := range opMap {
		for j := range opMap[i] {
			opMap[i][j].Name = opNames[i]
		}
	}
}

func genProj(wr io.Writer) error {
	tmpl, err := template.New("proj").Parse(`// Code generated by execgen; DO NOT EDIT.

package exectoy

{{define "opConstName"}}proj{{.Name}}{{.LTyp.Name}}{{.RTyp.Name}}ConstOp{{end}}
{{define "opName"}}proj{{.Name}}{{.LTyp.Name}}{{.RTyp.Name}}Op{{end}}

{{- range .}}
{{- range .}}
type {{template "opConstName" .}} struct {
	input ExecOp

	colIdx   int
	constArg {{.RTyp.GoTyp}}

	outputIdx int
}

func (p *{{template "opConstName" .}}) Next() dataFlow {
	flow := p.input.Next()

	projCol := flow.b[p.outputIdx].({{.RetTyp.GoTyp}}Column)
	col := flow.b[p.colIdx].({{.LTyp.GoTyp}}Column)
	if flow.useSel {
		for s := 0; s < flow.n; s++ {
			i := flow.sel[s]
			projCol[i] = col[i] {{.OpStr}} p.constArg
		}
	} else {
		for i := 0; i < flow.n; i++ {
			projCol[i] = col[i] {{.OpStr}} p.constArg
		}
	}
	return flow
}

func (p {{template "opConstName" .}}) Init() {}

type {{template "opName" .}} struct {
	input ExecOp

	col1Idx int
	col2Idx int

	outputIdx int
}

func (p *{{template "opName" .}}) Next() dataFlow {
	flow := p.input.Next()

	projCol := flow.b[p.outputIdx].({{.RetTyp.GoTyp}}Column)
	col1 := flow.b[p.col1Idx].({{.LTyp.GoTyp}}Column)
	col2 := flow.b[p.col2Idx].({{.RTyp.GoTyp}}Column)
	if flow.useSel {
		for s := 0; s < flow.n; s++ {
			i := flow.sel[s]
			projCol[i] = col1[i] {{.OpStr}} col2[i]
		}
	} else {
		for i := 0; i < flow.n; i++ {
			projCol[i] = col1[i] {{.OpStr}} col2[i]
		}
	}
	return flow
}

func (p {{template "opName" .}}) Init() {}
{{- end}}
{{- end}}
`)
	if err != nil {
		return err
	}

	return tmpl.Execute(wr, opMap)
}

var out = flag.String("out", "", "output file")

func usage() {
	fmt.Fprintf(os.Stderr, `usage: execgen [-out filename] command

The commands are:
	proj    generate projection code

`)
	flag.PrintDefaults()
	os.Exit(2)
}

func main() {
	flag.Parse()
	flag.Usage = usage
	if len(flag.Args()) != 1 {
		usage()
	}

	wr := os.Stdout
	if *out != "" {
		file, err := os.Create(*out)
		if err != nil {
			panic(err)
		}
		defer file.Close()

		wr = file
	}

	cmd := flag.Args()[0]

	switch cmd {
	case "proj":
		if err := genProj(wr); err != nil {
			panic(err)
		}
	}
}
